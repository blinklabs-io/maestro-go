/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
	"fmt"
)

// MirSource The pot from which an MIR reward is being funded by
type MirSource string

// List of MirSource
const (
	MIRSOURCE_RESERVES MirSource = "reserves"
	MIRSOURCE_TREASURY MirSource = "treasury"
)

// All allowed values of MirSource enum
var AllowedMirSourceEnumValues = []MirSource{
	"reserves",
	"treasury",
}

func (v *MirSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MirSource(value)
	for _, existing := range AllowedMirSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MirSource", value)
}

// NewMirSourceFromValue returns a pointer to a valid MirSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMirSourceFromValue(v string) (*MirSource, error) {
	ev := MirSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MirSource: valid values are %v", v, AllowedMirSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MirSource) IsValid() bool {
	for _, existing := range AllowedMirSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MirSource value
func (v MirSource) Ptr() *MirSource {
	return &v
}

type NullableMirSource struct {
	value *MirSource
	isSet bool
}

func (v NullableMirSource) Get() *MirSource {
	return v.value
}

func (v *NullableMirSource) Set(val *MirSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMirSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMirSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMirSource(val *MirSource) *NullableMirSource {
	return &NullableMirSource{value: val, isSet: true}
}

func (v NullableMirSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMirSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

