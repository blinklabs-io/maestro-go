/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the Pointer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pointer{}

// Pointer struct for Pointer
type Pointer struct {
	CertIndex int64 `json:"cert_index"`
	Slot int64 `json:"slot"`
	TxIndex int64 `json:"tx_index"`
}

// NewPointer instantiates a new Pointer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointer(certIndex int64, slot int64, txIndex int64) *Pointer {
	this := Pointer{}
	this.CertIndex = certIndex
	this.Slot = slot
	this.TxIndex = txIndex
	return &this
}

// NewPointerWithDefaults instantiates a new Pointer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointerWithDefaults() *Pointer {
	this := Pointer{}
	return &this
}

// GetCertIndex returns the CertIndex field value
func (o *Pointer) GetCertIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CertIndex
}

// GetCertIndexOk returns a tuple with the CertIndex field value
// and a boolean to check if the value has been set.
func (o *Pointer) GetCertIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertIndex, true
}

// SetCertIndex sets field value
func (o *Pointer) SetCertIndex(v int64) {
	o.CertIndex = v
}

// GetSlot returns the Slot field value
func (o *Pointer) GetSlot() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Slot
}

// GetSlotOk returns a tuple with the Slot field value
// and a boolean to check if the value has been set.
func (o *Pointer) GetSlotOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slot, true
}

// SetSlot sets field value
func (o *Pointer) SetSlot(v int64) {
	o.Slot = v
}

// GetTxIndex returns the TxIndex field value
func (o *Pointer) GetTxIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TxIndex
}

// GetTxIndexOk returns a tuple with the TxIndex field value
// and a boolean to check if the value has been set.
func (o *Pointer) GetTxIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxIndex, true
}

// SetTxIndex sets field value
func (o *Pointer) SetTxIndex(v int64) {
	o.TxIndex = v
}

func (o Pointer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pointer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cert_index"] = o.CertIndex
	toSerialize["slot"] = o.Slot
	toSerialize["tx_index"] = o.TxIndex
	return toSerialize, nil
}

type NullablePointer struct {
	value *Pointer
	isSet bool
}

func (v NullablePointer) Get() *Pointer {
	return v.value
}

func (v *NullablePointer) Set(val *Pointer) {
	v.value = val
	v.isSet = true
}

func (v NullablePointer) IsSet() bool {
	return v.isSet
}

func (v *NullablePointer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointer(val *Pointer) *NullablePointer {
	return &NullablePointer{value: val, isSet: true}
}

func (v NullablePointer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


