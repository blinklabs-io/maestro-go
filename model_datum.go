/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the Datum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Datum{}

// Datum struct for Datum
type Datum struct {
	// Hex encoded datum CBOR bytes
	Bytes string `json:"bytes"`
	Json map[string]interface{} `json:"json"`
}

// NewDatum instantiates a new Datum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatum(bytes string, json map[string]interface{}) *Datum {
	this := Datum{}
	this.Bytes = bytes
	this.Json = json
	return &this
}

// NewDatumWithDefaults instantiates a new Datum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatumWithDefaults() *Datum {
	this := Datum{}
	return &this
}

// GetBytes returns the Bytes field value
func (o *Datum) GetBytes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *Datum) GetBytesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *Datum) SetBytes(v string) {
	o.Bytes = v
}

// GetJson returns the Json field value
func (o *Datum) GetJson() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Json
}

// GetJsonOk returns a tuple with the Json field value
// and a boolean to check if the value has been set.
func (o *Datum) GetJsonOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Json, true
}

// SetJson sets field value
func (o *Datum) SetJson(v map[string]interface{}) {
	o.Json = v
}

func (o Datum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Datum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes
	toSerialize["json"] = o.Json
	return toSerialize, nil
}

type NullableDatum struct {
	value *Datum
	isSet bool
}

func (v NullableDatum) Get() *Datum {
	return v.value
}

func (v *NullableDatum) Set(val *Datum) {
	v.value = val
	v.isSet = true
}

func (v NullableDatum) IsSet() bool {
	return v.isSet
}

func (v *NullableDatum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatum(val *Datum) *NullableDatum {
	return &NullableDatum{value: val, isSet: true}
}

func (v NullableDatum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


