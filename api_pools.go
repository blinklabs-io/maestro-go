/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PoolsAPI interface {

	/*
	ListPools Registered stake pools

	Returns a list of currently registered stake pools

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoolsAPIListPoolsRequest
	*/
	ListPools(ctx context.Context) PoolsAPIListPoolsRequest

	// ListPoolsExecute executes the request
	//  @return []PoolListInfo
	ListPoolsExecute(r PoolsAPIListPoolsRequest) ([]PoolListInfo, *http.Response, error)

	/*
	PoolBlocks Stake pool blocks

	Return information about blocks minted by a given pool for all epochs (or just epoch `epoch_no` if provided)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolBlocksRequest
	*/
	PoolBlocks(ctx context.Context, poolId string) PoolsAPIPoolBlocksRequest

	// PoolBlocksExecute executes the request
	//  @return []PoolBlock
	PoolBlocksExecute(r PoolsAPIPoolBlocksRequest) ([]PoolBlock, *http.Response, error)

	/*
	PoolDelegators Stake pool delegators

	Returns a list of delegators of the specified pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolDelegatorsRequest
	*/
	PoolDelegators(ctx context.Context, poolId string) PoolsAPIPoolDelegatorsRequest

	// PoolDelegatorsExecute executes the request
	//  @return []DelegatorInfo
	PoolDelegatorsExecute(r PoolsAPIPoolDelegatorsRequest) ([]DelegatorInfo, *http.Response, error)

	/*
	PoolHistory Stake pool history

	Returns per-epoch information about the specified pool (or just epoch `epoch_no`)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolHistoryRequest
	*/
	PoolHistory(ctx context.Context, poolId string) PoolsAPIPoolHistoryRequest

	// PoolHistoryExecute executes the request
	//  @return []PoolHistory
	PoolHistoryExecute(r PoolsAPIPoolHistoryRequest) ([]PoolHistory, *http.Response, error)

	/*
	PoolInfo Stake pool details

	Returns current information about the specified pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolInfoRequest
	*/
	PoolInfo(ctx context.Context, poolId string) PoolsAPIPoolInfoRequest

	// PoolInfoExecute executes the request
	//  @return PoolInfo
	PoolInfoExecute(r PoolsAPIPoolInfoRequest) (*PoolInfo, *http.Response, error)

	/*
	PoolMetadata Stake pool metadata

	Returns the metadata declared by a specific pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolMetadataRequest
	*/
	PoolMetadata(ctx context.Context, poolId string) PoolsAPIPoolMetadataRequest

	// PoolMetadataExecute executes the request
	//  @return PoolMetadata
	PoolMetadataExecute(r PoolsAPIPoolMetadataRequest) (*PoolMetadata, *http.Response, error)

	/*
	PoolRelays Stake pool relays

	Returns a list of relays declared by the specified pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolRelaysRequest
	*/
	PoolRelays(ctx context.Context, poolId string) PoolsAPIPoolRelaysRequest

	// PoolRelaysExecute executes the request
	//  @return []PoolRelay
	PoolRelaysExecute(r PoolsAPIPoolRelaysRequest) ([]PoolRelay, *http.Response, error)

	/*
	PoolUpdates Stake pool updates

	Returns a list of updates relating to the specified pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param poolId Bech32 encoded pool ID
	@return PoolsAPIPoolUpdatesRequest
	*/
	PoolUpdates(ctx context.Context, poolId string) PoolsAPIPoolUpdatesRequest

	// PoolUpdatesExecute executes the request
	//  @return []PoolUpdate
	PoolUpdatesExecute(r PoolsAPIPoolUpdatesRequest) ([]PoolUpdate, *http.Response, error)
}

// PoolsAPIService PoolsAPI service
type PoolsAPIService service

type PoolsAPIListPoolsRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r PoolsAPIListPoolsRequest) Count(count int32) PoolsAPIListPoolsRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r PoolsAPIListPoolsRequest) Page(page int32) PoolsAPIListPoolsRequest {
	r.page = &page
	return r
}

func (r PoolsAPIListPoolsRequest) Execute() ([]PoolListInfo, *http.Response, error) {
	return r.ApiService.ListPoolsExecute(r)
}

/*
ListPools Registered stake pools

Returns a list of currently registered stake pools

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolsAPIListPoolsRequest
*/
func (a *PoolsAPIService) ListPools(ctx context.Context) PoolsAPIListPoolsRequest {
	return PoolsAPIListPoolsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PoolListInfo
func (a *PoolsAPIService) ListPoolsExecute(r PoolsAPIListPoolsRequest) ([]PoolListInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PoolListInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.ListPools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolBlocksRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
	epochNo *int32
	count *int32
	page *int32
	order *string
}

// Epoch number to fetch results for
func (r PoolsAPIPoolBlocksRequest) EpochNo(epochNo int32) PoolsAPIPoolBlocksRequest {
	r.epochNo = &epochNo
	return r
}

// The max number of results per pagination page
func (r PoolsAPIPoolBlocksRequest) Count(count int32) PoolsAPIPoolBlocksRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r PoolsAPIPoolBlocksRequest) Page(page int32) PoolsAPIPoolBlocksRequest {
	r.page = &page
	return r
}

// The order in which the results are sorted (by absolute slot)
func (r PoolsAPIPoolBlocksRequest) Order(order string) PoolsAPIPoolBlocksRequest {
	r.order = &order
	return r
}

func (r PoolsAPIPoolBlocksRequest) Execute() ([]PoolBlock, *http.Response, error) {
	return r.ApiService.PoolBlocksExecute(r)
}

/*
PoolBlocks Stake pool blocks

Return information about blocks minted by a given pool for all epochs (or just epoch `epoch_no` if provided)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolBlocksRequest
*/
func (a *PoolsAPIService) PoolBlocks(ctx context.Context, poolId string) PoolsAPIPoolBlocksRequest {
	return PoolsAPIPoolBlocksRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return []PoolBlock
func (a *PoolsAPIService) PoolBlocksExecute(r PoolsAPIPoolBlocksRequest) ([]PoolBlock, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PoolBlock
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolBlocks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/blocks"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.epochNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch_no", r.epochNo, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolDelegatorsRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r PoolsAPIPoolDelegatorsRequest) Count(count int32) PoolsAPIPoolDelegatorsRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r PoolsAPIPoolDelegatorsRequest) Page(page int32) PoolsAPIPoolDelegatorsRequest {
	r.page = &page
	return r
}

func (r PoolsAPIPoolDelegatorsRequest) Execute() ([]DelegatorInfo, *http.Response, error) {
	return r.ApiService.PoolDelegatorsExecute(r)
}

/*
PoolDelegators Stake pool delegators

Returns a list of delegators of the specified pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolDelegatorsRequest
*/
func (a *PoolsAPIService) PoolDelegators(ctx context.Context, poolId string) PoolsAPIPoolDelegatorsRequest {
	return PoolsAPIPoolDelegatorsRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return []DelegatorInfo
func (a *PoolsAPIService) PoolDelegatorsExecute(r PoolsAPIPoolDelegatorsRequest) ([]DelegatorInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DelegatorInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolDelegators")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/delegators"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolHistoryRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
	epochNo *int32
	count *int32
	page *int32
	order *string
}

// Epoch number to fetch results for
func (r PoolsAPIPoolHistoryRequest) EpochNo(epochNo int32) PoolsAPIPoolHistoryRequest {
	r.epochNo = &epochNo
	return r
}

// The max number of results per pagination page
func (r PoolsAPIPoolHistoryRequest) Count(count int32) PoolsAPIPoolHistoryRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r PoolsAPIPoolHistoryRequest) Page(page int32) PoolsAPIPoolHistoryRequest {
	r.page = &page
	return r
}

// The order in which the results are sorted (by epoch number)
func (r PoolsAPIPoolHistoryRequest) Order(order string) PoolsAPIPoolHistoryRequest {
	r.order = &order
	return r
}

func (r PoolsAPIPoolHistoryRequest) Execute() ([]PoolHistory, *http.Response, error) {
	return r.ApiService.PoolHistoryExecute(r)
}

/*
PoolHistory Stake pool history

Returns per-epoch information about the specified pool (or just epoch `epoch_no`)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolHistoryRequest
*/
func (a *PoolsAPIService) PoolHistory(ctx context.Context, poolId string) PoolsAPIPoolHistoryRequest {
	return PoolsAPIPoolHistoryRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return []PoolHistory
func (a *PoolsAPIService) PoolHistoryExecute(r PoolsAPIPoolHistoryRequest) ([]PoolHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PoolHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.epochNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch_no", r.epochNo, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolInfoRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
}

func (r PoolsAPIPoolInfoRequest) Execute() (*PoolInfo, *http.Response, error) {
	return r.ApiService.PoolInfoExecute(r)
}

/*
PoolInfo Stake pool details

Returns current information about the specified pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolInfoRequest
*/
func (a *PoolsAPIService) PoolInfo(ctx context.Context, poolId string) PoolsAPIPoolInfoRequest {
	return PoolsAPIPoolInfoRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return PoolInfo
func (a *PoolsAPIService) PoolInfoExecute(r PoolsAPIPoolInfoRequest) (*PoolInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PoolInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolMetadataRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
}

func (r PoolsAPIPoolMetadataRequest) Execute() (*PoolMetadata, *http.Response, error) {
	return r.ApiService.PoolMetadataExecute(r)
}

/*
PoolMetadata Stake pool metadata

Returns the metadata declared by a specific pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolMetadataRequest
*/
func (a *PoolsAPIService) PoolMetadata(ctx context.Context, poolId string) PoolsAPIPoolMetadataRequest {
	return PoolsAPIPoolMetadataRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return PoolMetadata
func (a *PoolsAPIService) PoolMetadataExecute(r PoolsAPIPoolMetadataRequest) (*PoolMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PoolMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolRelaysRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
}

func (r PoolsAPIPoolRelaysRequest) Execute() ([]PoolRelay, *http.Response, error) {
	return r.ApiService.PoolRelaysExecute(r)
}

/*
PoolRelays Stake pool relays

Returns a list of relays declared by the specified pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolRelaysRequest
*/
func (a *PoolsAPIService) PoolRelays(ctx context.Context, poolId string) PoolsAPIPoolRelaysRequest {
	return PoolsAPIPoolRelaysRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return []PoolRelay
func (a *PoolsAPIService) PoolRelaysExecute(r PoolsAPIPoolRelaysRequest) ([]PoolRelay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PoolRelay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolRelays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/relays"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIPoolUpdatesRequest struct {
	ctx context.Context
	ApiService PoolsAPI
	poolId string
}

func (r PoolsAPIPoolUpdatesRequest) Execute() ([]PoolUpdate, *http.Response, error) {
	return r.ApiService.PoolUpdatesExecute(r)
}

/*
PoolUpdates Stake pool updates

Returns a list of updates relating to the specified pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param poolId Bech32 encoded pool ID
 @return PoolsAPIPoolUpdatesRequest
*/
func (a *PoolsAPIService) PoolUpdates(ctx context.Context, poolId string) PoolsAPIPoolUpdatesRequest {
	return PoolsAPIPoolUpdatesRequest{
		ApiService: a,
		ctx: ctx,
		poolId: poolId,
	}
}

// Execute executes the request
//  @return []PoolUpdate
func (a *PoolsAPIService) PoolUpdatesExecute(r PoolsAPIPoolUpdatesRequest) ([]PoolUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PoolUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.PoolUpdates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{pool_id}/updates"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", url.PathEscape(parameterValueToString(r.poolId, "poolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
