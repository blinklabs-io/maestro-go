/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the AccountHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountHistory{}

// AccountHistory Per-epoch information about a stake account
type AccountHistory struct {
	// Active stake of the account in the epoch
	ActiveStake int64 `json:"active_stake"`
	// Epoch number
	EpochNo int32 `json:"epoch_no"`
	// Bech32 encoded pool ID the account was delegated to
	PoolId *string `json:"pool_id,omitempty"`
}

// NewAccountHistory instantiates a new AccountHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountHistory(activeStake int64, epochNo int32) *AccountHistory {
	this := AccountHistory{}
	this.ActiveStake = activeStake
	this.EpochNo = epochNo
	return &this
}

// NewAccountHistoryWithDefaults instantiates a new AccountHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountHistoryWithDefaults() *AccountHistory {
	this := AccountHistory{}
	return &this
}

// GetActiveStake returns the ActiveStake field value
func (o *AccountHistory) GetActiveStake() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ActiveStake
}

// GetActiveStakeOk returns a tuple with the ActiveStake field value
// and a boolean to check if the value has been set.
func (o *AccountHistory) GetActiveStakeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveStake, true
}

// SetActiveStake sets field value
func (o *AccountHistory) SetActiveStake(v int64) {
	o.ActiveStake = v
}

// GetEpochNo returns the EpochNo field value
func (o *AccountHistory) GetEpochNo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EpochNo
}

// GetEpochNoOk returns a tuple with the EpochNo field value
// and a boolean to check if the value has been set.
func (o *AccountHistory) GetEpochNoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpochNo, true
}

// SetEpochNo sets field value
func (o *AccountHistory) SetEpochNo(v int32) {
	o.EpochNo = v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise.
func (o *AccountHistory) GetPoolId() string {
	if o == nil || IsNil(o.PoolId) {
		var ret string
		return ret
	}
	return *o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHistory) GetPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.PoolId) {
		return nil, false
	}
	return o.PoolId, true
}

// HasPoolId returns a boolean if a field has been set.
func (o *AccountHistory) HasPoolId() bool {
	if o != nil && !IsNil(o.PoolId) {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given string and assigns it to the PoolId field.
func (o *AccountHistory) SetPoolId(v string) {
	o.PoolId = &v
}

func (o AccountHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active_stake"] = o.ActiveStake
	toSerialize["epoch_no"] = o.EpochNo
	if !IsNil(o.PoolId) {
		toSerialize["pool_id"] = o.PoolId
	}
	return toSerialize, nil
}

type NullableAccountHistory struct {
	value *AccountHistory
	isSet bool
}

func (v NullableAccountHistory) Get() *AccountHistory {
	return v.value
}

func (v *NullableAccountHistory) Set(val *AccountHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountHistory(val *AccountHistory) *NullableAccountHistory {
	return &NullableAccountHistory{value: val, isSet: true}
}

func (v NullableAccountHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


