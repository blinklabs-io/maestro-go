/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountReward{}

// AccountReward Stake account related reward
type AccountReward struct {
	// Reward amount
	Amount int64 `json:"amount"`
	// Epoch in which the reward was earned
	EarnedEpoch int32 `json:"earned_epoch"`
	// Bech32 encoded pool ID (if relevant to reward type)
	PoolId string `json:"pool_id"`
	// Epoch at which the reward is spendable
	SpendableEpoch int32 `json:"spendable_epoch"`
	Type AccountStakingRewardType `json:"type"`
}

// NewAccountReward instantiates a new AccountReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountReward(amount int64, earnedEpoch int32, poolId string, spendableEpoch int32, type_ AccountStakingRewardType) *AccountReward {
	this := AccountReward{}
	this.Amount = amount
	this.EarnedEpoch = earnedEpoch
	this.PoolId = poolId
	this.SpendableEpoch = spendableEpoch
	this.Type = type_
	return &this
}

// NewAccountRewardWithDefaults instantiates a new AccountReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountRewardWithDefaults() *AccountReward {
	this := AccountReward{}
	return &this
}

// GetAmount returns the Amount field value
func (o *AccountReward) GetAmount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetAmountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AccountReward) SetAmount(v int64) {
	o.Amount = v
}

// GetEarnedEpoch returns the EarnedEpoch field value
func (o *AccountReward) GetEarnedEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EarnedEpoch
}

// GetEarnedEpochOk returns a tuple with the EarnedEpoch field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetEarnedEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EarnedEpoch, true
}

// SetEarnedEpoch sets field value
func (o *AccountReward) SetEarnedEpoch(v int32) {
	o.EarnedEpoch = v
}

// GetPoolId returns the PoolId field value
func (o *AccountReward) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *AccountReward) SetPoolId(v string) {
	o.PoolId = v
}

// GetSpendableEpoch returns the SpendableEpoch field value
func (o *AccountReward) GetSpendableEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpendableEpoch
}

// GetSpendableEpochOk returns a tuple with the SpendableEpoch field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetSpendableEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpendableEpoch, true
}

// SetSpendableEpoch sets field value
func (o *AccountReward) SetSpendableEpoch(v int32) {
	o.SpendableEpoch = v
}

// GetType returns the Type field value
func (o *AccountReward) GetType() AccountStakingRewardType {
	if o == nil {
		var ret AccountStakingRewardType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetTypeOk() (*AccountStakingRewardType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountReward) SetType(v AccountStakingRewardType) {
	o.Type = v
}

func (o AccountReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["earned_epoch"] = o.EarnedEpoch
	toSerialize["pool_id"] = o.PoolId
	toSerialize["spendable_epoch"] = o.SpendableEpoch
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAccountReward struct {
	value *AccountReward
	isSet bool
}

func (v NullableAccountReward) Get() *AccountReward {
	return v.value
}

func (v *NullableAccountReward) Set(val *AccountReward) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountReward) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountReward(val *AccountReward) *NullableAccountReward {
	return &NullableAccountReward{value: val, isSet: true}
}

func (v NullableAccountReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


