/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the PoolUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolUpdate{}

// PoolUpdate Update to a stake pool
type PoolUpdate struct {
	// Epoch when the update takes effect
	ActiveEpochNo int64 `json:"active_epoch_no"`
	// UNIX timestamp of the block containing the transaction
	BlockTime *int32 `json:"block_time,omitempty"`
	// Pool fixed cost
	FixedCost int64 `json:"fixed_cost"`
	// Pool margin
	Margin float32 `json:"margin"`
	// Hash of the pool metadata
	MetaHash *string `json:"meta_hash,omitempty"`
	MetaJson *PoolMetaJson `json:"meta_json,omitempty"`
	// URL pointing to the pool metadata
	MetaUrl *string `json:"meta_url,omitempty"`
	Owners []string `json:"owners"`
	// Pool pledge
	Pledge int64 `json:"pledge"`
	// Bech32 encoded pool ID
	PoolIdBech32 string `json:"pool_id_bech32"`
	// Hex encoded pool ID
	PoolIdHex string `json:"pool_id_hex"`
	// Status of the pool
	PoolStatus *string `json:"pool_status,omitempty"`
	Relays []Relay `json:"relays"`
	// Epoch at which the pool will be retired
	RetiringEpoch *int32 `json:"retiring_epoch,omitempty"`
	// Reward address associated with the pool
	RewardAddr *string `json:"reward_addr,omitempty"`
	// Transaction hash for the transaction which contained the update
	TxHash string `json:"tx_hash"`
	// VRF key hash
	VrfKeyHash string `json:"vrf_key_hash"`
}

// NewPoolUpdate instantiates a new PoolUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolUpdate(activeEpochNo int64, fixedCost int64, margin float32, owners []string, pledge int64, poolIdBech32 string, poolIdHex string, relays []Relay, txHash string, vrfKeyHash string) *PoolUpdate {
	this := PoolUpdate{}
	this.ActiveEpochNo = activeEpochNo
	this.FixedCost = fixedCost
	this.Margin = margin
	this.Owners = owners
	this.Pledge = pledge
	this.PoolIdBech32 = poolIdBech32
	this.PoolIdHex = poolIdHex
	this.Relays = relays
	this.TxHash = txHash
	this.VrfKeyHash = vrfKeyHash
	return &this
}

// NewPoolUpdateWithDefaults instantiates a new PoolUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolUpdateWithDefaults() *PoolUpdate {
	this := PoolUpdate{}
	return &this
}

// GetActiveEpochNo returns the ActiveEpochNo field value
func (o *PoolUpdate) GetActiveEpochNo() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ActiveEpochNo
}

// GetActiveEpochNoOk returns a tuple with the ActiveEpochNo field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetActiveEpochNoOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveEpochNo, true
}

// SetActiveEpochNo sets field value
func (o *PoolUpdate) SetActiveEpochNo(v int64) {
	o.ActiveEpochNo = v
}

// GetBlockTime returns the BlockTime field value if set, zero value otherwise.
func (o *PoolUpdate) GetBlockTime() int32 {
	if o == nil || IsNil(o.BlockTime) {
		var ret int32
		return ret
	}
	return *o.BlockTime
}

// GetBlockTimeOk returns a tuple with the BlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetBlockTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockTime) {
		return nil, false
	}
	return o.BlockTime, true
}

// HasBlockTime returns a boolean if a field has been set.
func (o *PoolUpdate) HasBlockTime() bool {
	if o != nil && !IsNil(o.BlockTime) {
		return true
	}

	return false
}

// SetBlockTime gets a reference to the given int32 and assigns it to the BlockTime field.
func (o *PoolUpdate) SetBlockTime(v int32) {
	o.BlockTime = &v
}

// GetFixedCost returns the FixedCost field value
func (o *PoolUpdate) GetFixedCost() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FixedCost
}

// GetFixedCostOk returns a tuple with the FixedCost field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetFixedCostOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedCost, true
}

// SetFixedCost sets field value
func (o *PoolUpdate) SetFixedCost(v int64) {
	o.FixedCost = v
}

// GetMargin returns the Margin field value
func (o *PoolUpdate) GetMargin() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Margin
}

// GetMarginOk returns a tuple with the Margin field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetMarginOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Margin, true
}

// SetMargin sets field value
func (o *PoolUpdate) SetMargin(v float32) {
	o.Margin = v
}

// GetMetaHash returns the MetaHash field value if set, zero value otherwise.
func (o *PoolUpdate) GetMetaHash() string {
	if o == nil || IsNil(o.MetaHash) {
		var ret string
		return ret
	}
	return *o.MetaHash
}

// GetMetaHashOk returns a tuple with the MetaHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetMetaHashOk() (*string, bool) {
	if o == nil || IsNil(o.MetaHash) {
		return nil, false
	}
	return o.MetaHash, true
}

// HasMetaHash returns a boolean if a field has been set.
func (o *PoolUpdate) HasMetaHash() bool {
	if o != nil && !IsNil(o.MetaHash) {
		return true
	}

	return false
}

// SetMetaHash gets a reference to the given string and assigns it to the MetaHash field.
func (o *PoolUpdate) SetMetaHash(v string) {
	o.MetaHash = &v
}

// GetMetaJson returns the MetaJson field value if set, zero value otherwise.
func (o *PoolUpdate) GetMetaJson() PoolMetaJson {
	if o == nil || IsNil(o.MetaJson) {
		var ret PoolMetaJson
		return ret
	}
	return *o.MetaJson
}

// GetMetaJsonOk returns a tuple with the MetaJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetMetaJsonOk() (*PoolMetaJson, bool) {
	if o == nil || IsNil(o.MetaJson) {
		return nil, false
	}
	return o.MetaJson, true
}

// HasMetaJson returns a boolean if a field has been set.
func (o *PoolUpdate) HasMetaJson() bool {
	if o != nil && !IsNil(o.MetaJson) {
		return true
	}

	return false
}

// SetMetaJson gets a reference to the given PoolMetaJson and assigns it to the MetaJson field.
func (o *PoolUpdate) SetMetaJson(v PoolMetaJson) {
	o.MetaJson = &v
}

// GetMetaUrl returns the MetaUrl field value if set, zero value otherwise.
func (o *PoolUpdate) GetMetaUrl() string {
	if o == nil || IsNil(o.MetaUrl) {
		var ret string
		return ret
	}
	return *o.MetaUrl
}

// GetMetaUrlOk returns a tuple with the MetaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetMetaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MetaUrl) {
		return nil, false
	}
	return o.MetaUrl, true
}

// HasMetaUrl returns a boolean if a field has been set.
func (o *PoolUpdate) HasMetaUrl() bool {
	if o != nil && !IsNil(o.MetaUrl) {
		return true
	}

	return false
}

// SetMetaUrl gets a reference to the given string and assigns it to the MetaUrl field.
func (o *PoolUpdate) SetMetaUrl(v string) {
	o.MetaUrl = &v
}

// GetOwners returns the Owners field value
func (o *PoolUpdate) GetOwners() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetOwnersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owners, true
}

// SetOwners sets field value
func (o *PoolUpdate) SetOwners(v []string) {
	o.Owners = v
}

// GetPledge returns the Pledge field value
func (o *PoolUpdate) GetPledge() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Pledge
}

// GetPledgeOk returns a tuple with the Pledge field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetPledgeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pledge, true
}

// SetPledge sets field value
func (o *PoolUpdate) SetPledge(v int64) {
	o.Pledge = v
}

// GetPoolIdBech32 returns the PoolIdBech32 field value
func (o *PoolUpdate) GetPoolIdBech32() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolIdBech32
}

// GetPoolIdBech32Ok returns a tuple with the PoolIdBech32 field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetPoolIdBech32Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolIdBech32, true
}

// SetPoolIdBech32 sets field value
func (o *PoolUpdate) SetPoolIdBech32(v string) {
	o.PoolIdBech32 = v
}

// GetPoolIdHex returns the PoolIdHex field value
func (o *PoolUpdate) GetPoolIdHex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolIdHex
}

// GetPoolIdHexOk returns a tuple with the PoolIdHex field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetPoolIdHexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolIdHex, true
}

// SetPoolIdHex sets field value
func (o *PoolUpdate) SetPoolIdHex(v string) {
	o.PoolIdHex = v
}

// GetPoolStatus returns the PoolStatus field value if set, zero value otherwise.
func (o *PoolUpdate) GetPoolStatus() string {
	if o == nil || IsNil(o.PoolStatus) {
		var ret string
		return ret
	}
	return *o.PoolStatus
}

// GetPoolStatusOk returns a tuple with the PoolStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetPoolStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PoolStatus) {
		return nil, false
	}
	return o.PoolStatus, true
}

// HasPoolStatus returns a boolean if a field has been set.
func (o *PoolUpdate) HasPoolStatus() bool {
	if o != nil && !IsNil(o.PoolStatus) {
		return true
	}

	return false
}

// SetPoolStatus gets a reference to the given string and assigns it to the PoolStatus field.
func (o *PoolUpdate) SetPoolStatus(v string) {
	o.PoolStatus = &v
}

// GetRelays returns the Relays field value
func (o *PoolUpdate) GetRelays() []Relay {
	if o == nil {
		var ret []Relay
		return ret
	}

	return o.Relays
}

// GetRelaysOk returns a tuple with the Relays field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetRelaysOk() ([]Relay, bool) {
	if o == nil {
		return nil, false
	}
	return o.Relays, true
}

// SetRelays sets field value
func (o *PoolUpdate) SetRelays(v []Relay) {
	o.Relays = v
}

// GetRetiringEpoch returns the RetiringEpoch field value if set, zero value otherwise.
func (o *PoolUpdate) GetRetiringEpoch() int32 {
	if o == nil || IsNil(o.RetiringEpoch) {
		var ret int32
		return ret
	}
	return *o.RetiringEpoch
}

// GetRetiringEpochOk returns a tuple with the RetiringEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetRetiringEpochOk() (*int32, bool) {
	if o == nil || IsNil(o.RetiringEpoch) {
		return nil, false
	}
	return o.RetiringEpoch, true
}

// HasRetiringEpoch returns a boolean if a field has been set.
func (o *PoolUpdate) HasRetiringEpoch() bool {
	if o != nil && !IsNil(o.RetiringEpoch) {
		return true
	}

	return false
}

// SetRetiringEpoch gets a reference to the given int32 and assigns it to the RetiringEpoch field.
func (o *PoolUpdate) SetRetiringEpoch(v int32) {
	o.RetiringEpoch = &v
}

// GetRewardAddr returns the RewardAddr field value if set, zero value otherwise.
func (o *PoolUpdate) GetRewardAddr() string {
	if o == nil || IsNil(o.RewardAddr) {
		var ret string
		return ret
	}
	return *o.RewardAddr
}

// GetRewardAddrOk returns a tuple with the RewardAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetRewardAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RewardAddr) {
		return nil, false
	}
	return o.RewardAddr, true
}

// HasRewardAddr returns a boolean if a field has been set.
func (o *PoolUpdate) HasRewardAddr() bool {
	if o != nil && !IsNil(o.RewardAddr) {
		return true
	}

	return false
}

// SetRewardAddr gets a reference to the given string and assigns it to the RewardAddr field.
func (o *PoolUpdate) SetRewardAddr(v string) {
	o.RewardAddr = &v
}

// GetTxHash returns the TxHash field value
func (o *PoolUpdate) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *PoolUpdate) SetTxHash(v string) {
	o.TxHash = v
}

// GetVrfKeyHash returns the VrfKeyHash field value
func (o *PoolUpdate) GetVrfKeyHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VrfKeyHash
}

// GetVrfKeyHashOk returns a tuple with the VrfKeyHash field value
// and a boolean to check if the value has been set.
func (o *PoolUpdate) GetVrfKeyHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VrfKeyHash, true
}

// SetVrfKeyHash sets field value
func (o *PoolUpdate) SetVrfKeyHash(v string) {
	o.VrfKeyHash = v
}

func (o PoolUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active_epoch_no"] = o.ActiveEpochNo
	if !IsNil(o.BlockTime) {
		toSerialize["block_time"] = o.BlockTime
	}
	toSerialize["fixed_cost"] = o.FixedCost
	toSerialize["margin"] = o.Margin
	if !IsNil(o.MetaHash) {
		toSerialize["meta_hash"] = o.MetaHash
	}
	if !IsNil(o.MetaJson) {
		toSerialize["meta_json"] = o.MetaJson
	}
	if !IsNil(o.MetaUrl) {
		toSerialize["meta_url"] = o.MetaUrl
	}
	toSerialize["owners"] = o.Owners
	toSerialize["pledge"] = o.Pledge
	toSerialize["pool_id_bech32"] = o.PoolIdBech32
	toSerialize["pool_id_hex"] = o.PoolIdHex
	if !IsNil(o.PoolStatus) {
		toSerialize["pool_status"] = o.PoolStatus
	}
	toSerialize["relays"] = o.Relays
	if !IsNil(o.RetiringEpoch) {
		toSerialize["retiring_epoch"] = o.RetiringEpoch
	}
	if !IsNil(o.RewardAddr) {
		toSerialize["reward_addr"] = o.RewardAddr
	}
	toSerialize["tx_hash"] = o.TxHash
	toSerialize["vrf_key_hash"] = o.VrfKeyHash
	return toSerialize, nil
}

type NullablePoolUpdate struct {
	value *PoolUpdate
	isSet bool
}

func (v NullablePoolUpdate) Get() *PoolUpdate {
	return v.value
}

func (v *NullablePoolUpdate) Set(val *PoolUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolUpdate(val *PoolUpdate) *NullablePoolUpdate {
	return &NullablePoolUpdate{value: val, isSet: true}
}

func (v NullablePoolUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


