/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolMetadata{}

// PoolMetadata Metadata associated with a stake pool
type PoolMetadata struct {
	// Hash of the pool metadata
	MetaHash *string `json:"meta_hash,omitempty"`
	MetaJson *PoolMetaJson `json:"meta_json,omitempty"`
	// URL pointing to the pool metadata
	MetaUrl *string `json:"meta_url,omitempty"`
	// Bech32 encoded pool ID
	PoolIdBech32 string `json:"pool_id_bech32"`
}

// NewPoolMetadata instantiates a new PoolMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolMetadata(poolIdBech32 string) *PoolMetadata {
	this := PoolMetadata{}
	this.PoolIdBech32 = poolIdBech32
	return &this
}

// NewPoolMetadataWithDefaults instantiates a new PoolMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolMetadataWithDefaults() *PoolMetadata {
	this := PoolMetadata{}
	return &this
}

// GetMetaHash returns the MetaHash field value if set, zero value otherwise.
func (o *PoolMetadata) GetMetaHash() string {
	if o == nil || IsNil(o.MetaHash) {
		var ret string
		return ret
	}
	return *o.MetaHash
}

// GetMetaHashOk returns a tuple with the MetaHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolMetadata) GetMetaHashOk() (*string, bool) {
	if o == nil || IsNil(o.MetaHash) {
		return nil, false
	}
	return o.MetaHash, true
}

// HasMetaHash returns a boolean if a field has been set.
func (o *PoolMetadata) HasMetaHash() bool {
	if o != nil && !IsNil(o.MetaHash) {
		return true
	}

	return false
}

// SetMetaHash gets a reference to the given string and assigns it to the MetaHash field.
func (o *PoolMetadata) SetMetaHash(v string) {
	o.MetaHash = &v
}

// GetMetaJson returns the MetaJson field value if set, zero value otherwise.
func (o *PoolMetadata) GetMetaJson() PoolMetaJson {
	if o == nil || IsNil(o.MetaJson) {
		var ret PoolMetaJson
		return ret
	}
	return *o.MetaJson
}

// GetMetaJsonOk returns a tuple with the MetaJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolMetadata) GetMetaJsonOk() (*PoolMetaJson, bool) {
	if o == nil || IsNil(o.MetaJson) {
		return nil, false
	}
	return o.MetaJson, true
}

// HasMetaJson returns a boolean if a field has been set.
func (o *PoolMetadata) HasMetaJson() bool {
	if o != nil && !IsNil(o.MetaJson) {
		return true
	}

	return false
}

// SetMetaJson gets a reference to the given PoolMetaJson and assigns it to the MetaJson field.
func (o *PoolMetadata) SetMetaJson(v PoolMetaJson) {
	o.MetaJson = &v
}

// GetMetaUrl returns the MetaUrl field value if set, zero value otherwise.
func (o *PoolMetadata) GetMetaUrl() string {
	if o == nil || IsNil(o.MetaUrl) {
		var ret string
		return ret
	}
	return *o.MetaUrl
}

// GetMetaUrlOk returns a tuple with the MetaUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolMetadata) GetMetaUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MetaUrl) {
		return nil, false
	}
	return o.MetaUrl, true
}

// HasMetaUrl returns a boolean if a field has been set.
func (o *PoolMetadata) HasMetaUrl() bool {
	if o != nil && !IsNil(o.MetaUrl) {
		return true
	}

	return false
}

// SetMetaUrl gets a reference to the given string and assigns it to the MetaUrl field.
func (o *PoolMetadata) SetMetaUrl(v string) {
	o.MetaUrl = &v
}

// GetPoolIdBech32 returns the PoolIdBech32 field value
func (o *PoolMetadata) GetPoolIdBech32() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolIdBech32
}

// GetPoolIdBech32Ok returns a tuple with the PoolIdBech32 field value
// and a boolean to check if the value has been set.
func (o *PoolMetadata) GetPoolIdBech32Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolIdBech32, true
}

// SetPoolIdBech32 sets field value
func (o *PoolMetadata) SetPoolIdBech32(v string) {
	o.PoolIdBech32 = v
}

func (o PoolMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetaHash) {
		toSerialize["meta_hash"] = o.MetaHash
	}
	if !IsNil(o.MetaJson) {
		toSerialize["meta_json"] = o.MetaJson
	}
	if !IsNil(o.MetaUrl) {
		toSerialize["meta_url"] = o.MetaUrl
	}
	toSerialize["pool_id_bech32"] = o.PoolIdBech32
	return toSerialize, nil
}

type NullablePoolMetadata struct {
	value *PoolMetadata
	isSet bool
}

func (v NullablePoolMetadata) Get() *PoolMetadata {
	return v.value
}

func (v *NullablePoolMetadata) Set(val *PoolMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolMetadata(val *PoolMetadata) *NullablePoolMetadata {
	return &NullablePoolMetadata{value: val, isSet: true}
}

func (v NullablePoolMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


