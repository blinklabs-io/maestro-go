/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AddressesAPI interface {

	/*
	AddressUtxos UTxOs at an address

	Return UTxOs controlled by an address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Bech32 encoded address
	@return AddressesAPIAddressUtxosRequest
	*/
	AddressUtxos(ctx context.Context, address string) AddressesAPIAddressUtxosRequest

	// AddressUtxosExecute executes the request
	//  @return []Utxo
	AddressUtxosExecute(r AddressesAPIAddressUtxosRequest) ([]Utxo, *http.Response, error)

	/*
	DecodeAddress Decoded receiving address information

	Returns the attributes of a decoded receiving address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address 
	@return AddressesAPIDecodeAddressRequest
	*/
	DecodeAddress(ctx context.Context, address string) AddressesAPIDecodeAddressRequest

	// DecodeAddressExecute executes the request
	//  @return AddressInfo
	DecodeAddressExecute(r AddressesAPIDecodeAddressRequest) (*AddressInfo, *http.Response, error)

	/*
	TxCountByAddress Transaction count of an address

	Returns the total number of transactions in which an address spent or received assets

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Bech32 encoded address
	@return AddressesAPITxCountByAddressRequest
	*/
	TxCountByAddress(ctx context.Context, address string) AddressesAPITxCountByAddressRequest

	// TxCountByAddressExecute executes the request
	//  @return AddressTxCount
	TxCountByAddressExecute(r AddressesAPITxCountByAddressRequest) (*AddressTxCount, *http.Response, error)

	/*
	UtxoRefsAtAddress UTxO references at an address

	Return all UTxO references controlled by an address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Bech32 encoded address
	@return AddressesAPIUtxoRefsAtAddressRequest
	*/
	UtxoRefsAtAddress(ctx context.Context, address string) AddressesAPIUtxoRefsAtAddressRequest

	// UtxoRefsAtAddressExecute executes the request
	//  @return []UtxoRef
	UtxoRefsAtAddressExecute(r AddressesAPIUtxoRefsAtAddressRequest) ([]UtxoRef, *http.Response, error)

	/*
	UtxosByAddresses UTxOs at multiple addresses

	Return all UTxOs controlled by each address in a list of addresses

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AddressesAPIUtxosByAddressesRequest
	*/
	UtxosByAddresses(ctx context.Context) AddressesAPIUtxosByAddressesRequest

	// UtxosByAddressesExecute executes the request
	//  @return []Utxo
	UtxosByAddressesExecute(r AddressesAPIUtxosByAddressesRequest) ([]Utxo, *http.Response, error)
}

// AddressesAPIService AddressesAPI service
type AddressesAPIService service

type AddressesAPIAddressUtxosRequest struct {
	ctx context.Context
	ApiService AddressesAPI
	address string
	resolveDatums *bool
	withCbor *bool
	count *int32
	page *int32
}

// Try find and include the corresponding datums for datum hashes
func (r AddressesAPIAddressUtxosRequest) ResolveDatums(resolveDatums bool) AddressesAPIAddressUtxosRequest {
	r.resolveDatums = &resolveDatums
	return r
}

// Include the CBOR encodings of the transaction outputs in the response
func (r AddressesAPIAddressUtxosRequest) WithCbor(withCbor bool) AddressesAPIAddressUtxosRequest {
	r.withCbor = &withCbor
	return r
}

// The max number of results per pagination page
func (r AddressesAPIAddressUtxosRequest) Count(count int32) AddressesAPIAddressUtxosRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AddressesAPIAddressUtxosRequest) Page(page int32) AddressesAPIAddressUtxosRequest {
	r.page = &page
	return r
}

func (r AddressesAPIAddressUtxosRequest) Execute() ([]Utxo, *http.Response, error) {
	return r.ApiService.AddressUtxosExecute(r)
}

/*
AddressUtxos UTxOs at an address

Return UTxOs controlled by an address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Bech32 encoded address
 @return AddressesAPIAddressUtxosRequest
*/
func (a *AddressesAPIService) AddressUtxos(ctx context.Context, address string) AddressesAPIAddressUtxosRequest {
	return AddressesAPIAddressUtxosRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return []Utxo
func (a *AddressesAPIService) AddressUtxosExecute(r AddressesAPIAddressUtxosRequest) ([]Utxo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Utxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.AddressUtxos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/addresses/{address}/utxos"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resolveDatums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolve_datums", r.resolveDatums, "")
	}
	if r.withCbor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_cbor", r.withCbor, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AddressesAPIDecodeAddressRequest struct {
	ctx context.Context
	ApiService AddressesAPI
	address string
}

func (r AddressesAPIDecodeAddressRequest) Execute() (*AddressInfo, *http.Response, error) {
	return r.ApiService.DecodeAddressExecute(r)
}

/*
DecodeAddress Decoded receiving address information

Returns the attributes of a decoded receiving address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address 
 @return AddressesAPIDecodeAddressRequest
*/
func (a *AddressesAPIService) DecodeAddress(ctx context.Context, address string) AddressesAPIDecodeAddressRequest {
	return AddressesAPIDecodeAddressRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return AddressInfo
func (a *AddressesAPIService) DecodeAddressExecute(r AddressesAPIDecodeAddressRequest) (*AddressInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.DecodeAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/addresses/{address}/decode"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AddressesAPITxCountByAddressRequest struct {
	ctx context.Context
	ApiService AddressesAPI
	address string
}

func (r AddressesAPITxCountByAddressRequest) Execute() (*AddressTxCount, *http.Response, error) {
	return r.ApiService.TxCountByAddressExecute(r)
}

/*
TxCountByAddress Transaction count of an address

Returns the total number of transactions in which an address spent or received assets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Bech32 encoded address
 @return AddressesAPITxCountByAddressRequest
*/
func (a *AddressesAPIService) TxCountByAddress(ctx context.Context, address string) AddressesAPITxCountByAddressRequest {
	return AddressesAPITxCountByAddressRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return AddressTxCount
func (a *AddressesAPIService) TxCountByAddressExecute(r AddressesAPITxCountByAddressRequest) (*AddressTxCount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressTxCount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.TxCountByAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/addresses/{address}/transactions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AddressesAPIUtxoRefsAtAddressRequest struct {
	ctx context.Context
	ApiService AddressesAPI
	address string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r AddressesAPIUtxoRefsAtAddressRequest) Count(count int32) AddressesAPIUtxoRefsAtAddressRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AddressesAPIUtxoRefsAtAddressRequest) Page(page int32) AddressesAPIUtxoRefsAtAddressRequest {
	r.page = &page
	return r
}

func (r AddressesAPIUtxoRefsAtAddressRequest) Execute() ([]UtxoRef, *http.Response, error) {
	return r.ApiService.UtxoRefsAtAddressExecute(r)
}

/*
UtxoRefsAtAddress UTxO references at an address

Return all UTxO references controlled by an address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Bech32 encoded address
 @return AddressesAPIUtxoRefsAtAddressRequest
*/
func (a *AddressesAPIService) UtxoRefsAtAddress(ctx context.Context, address string) AddressesAPIUtxoRefsAtAddressRequest {
	return AddressesAPIUtxoRefsAtAddressRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return []UtxoRef
func (a *AddressesAPIService) UtxoRefsAtAddressExecute(r AddressesAPIUtxoRefsAtAddressRequest) ([]UtxoRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UtxoRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.UtxoRefsAtAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/addresses/{address}/utxo_refs"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterValueToString(r.address, "address")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AddressesAPIUtxosByAddressesRequest struct {
	ctx context.Context
	ApiService AddressesAPI
	requestBody *[]string
	resolveDatums *bool
	withCbor *bool
	count *int32
	page *int32
}

// List of addresses
func (r AddressesAPIUtxosByAddressesRequest) RequestBody(requestBody []string) AddressesAPIUtxosByAddressesRequest {
	r.requestBody = &requestBody
	return r
}

// Try find and include the corresponding datums for datum hashes
func (r AddressesAPIUtxosByAddressesRequest) ResolveDatums(resolveDatums bool) AddressesAPIUtxosByAddressesRequest {
	r.resolveDatums = &resolveDatums
	return r
}

// Include the CBOR encodings of the transaction outputs in the response
func (r AddressesAPIUtxosByAddressesRequest) WithCbor(withCbor bool) AddressesAPIUtxosByAddressesRequest {
	r.withCbor = &withCbor
	return r
}

// The max number of results per pagination page
func (r AddressesAPIUtxosByAddressesRequest) Count(count int32) AddressesAPIUtxosByAddressesRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AddressesAPIUtxosByAddressesRequest) Page(page int32) AddressesAPIUtxosByAddressesRequest {
	r.page = &page
	return r
}

func (r AddressesAPIUtxosByAddressesRequest) Execute() ([]Utxo, *http.Response, error) {
	return r.ApiService.UtxosByAddressesExecute(r)
}

/*
UtxosByAddresses UTxOs at multiple addresses

Return all UTxOs controlled by each address in a list of addresses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AddressesAPIUtxosByAddressesRequest
*/
func (a *AddressesAPIService) UtxosByAddresses(ctx context.Context) AddressesAPIUtxosByAddressesRequest {
	return AddressesAPIUtxosByAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Utxo
func (a *AddressesAPIService) UtxosByAddressesExecute(r AddressesAPIUtxosByAddressesRequest) ([]Utxo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Utxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.UtxosByAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/addresses/utxos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	if r.resolveDatums != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolve_datums", r.resolveDatums, "")
	}
	if r.withCbor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_cbor", r.withCbor, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
