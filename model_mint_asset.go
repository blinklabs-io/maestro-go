/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the MintAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MintAsset{}

// MintAsset Lovelace or native asset
type MintAsset struct {
	// Amount of the asset minted or burned (negative is burn)
	Quantity int64 `json:"quantity"`
	// Asset (in the form `hex(policy_id)#hex(asset_name)`)
	Unit string `json:"unit"`
}

// NewMintAsset instantiates a new MintAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMintAsset(quantity int64, unit string) *MintAsset {
	this := MintAsset{}
	this.Quantity = quantity
	this.Unit = unit
	return &this
}

// NewMintAssetWithDefaults instantiates a new MintAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMintAssetWithDefaults() *MintAsset {
	this := MintAsset{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *MintAsset) GetQuantity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *MintAsset) GetQuantityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *MintAsset) SetQuantity(v int64) {
	o.Quantity = v
}

// GetUnit returns the Unit field value
func (o *MintAsset) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *MintAsset) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *MintAsset) SetUnit(v string) {
	o.Unit = v
}

func (o MintAsset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MintAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

type NullableMintAsset struct {
	value *MintAsset
	isSet bool
}

func (v NullableMintAsset) Get() *MintAsset {
	return v.value
}

func (v *NullableMintAsset) Set(val *MintAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableMintAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableMintAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMintAsset(val *MintAsset) *NullableMintAsset {
	return &NullableMintAsset{value: val, isSet: true}
}

func (v NullableMintAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMintAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


