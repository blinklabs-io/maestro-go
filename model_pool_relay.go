/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolRelay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolRelay{}

// PoolRelay Relay declared by a stake pool
type PoolRelay struct {
	// Bech32 encoded pool ID
	PoolIdBech32 string `json:"pool_id_bech32"`
	Relays []Relay `json:"relays"`
}

// NewPoolRelay instantiates a new PoolRelay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolRelay(poolIdBech32 string, relays []Relay) *PoolRelay {
	this := PoolRelay{}
	this.PoolIdBech32 = poolIdBech32
	this.Relays = relays
	return &this
}

// NewPoolRelayWithDefaults instantiates a new PoolRelay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolRelayWithDefaults() *PoolRelay {
	this := PoolRelay{}
	return &this
}

// GetPoolIdBech32 returns the PoolIdBech32 field value
func (o *PoolRelay) GetPoolIdBech32() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolIdBech32
}

// GetPoolIdBech32Ok returns a tuple with the PoolIdBech32 field value
// and a boolean to check if the value has been set.
func (o *PoolRelay) GetPoolIdBech32Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolIdBech32, true
}

// SetPoolIdBech32 sets field value
func (o *PoolRelay) SetPoolIdBech32(v string) {
	o.PoolIdBech32 = v
}

// GetRelays returns the Relays field value
func (o *PoolRelay) GetRelays() []Relay {
	if o == nil {
		var ret []Relay
		return ret
	}

	return o.Relays
}

// GetRelaysOk returns a tuple with the Relays field value
// and a boolean to check if the value has been set.
func (o *PoolRelay) GetRelaysOk() ([]Relay, bool) {
	if o == nil {
		return nil, false
	}
	return o.Relays, true
}

// SetRelays sets field value
func (o *PoolRelay) SetRelays(v []Relay) {
	o.Relays = v
}

func (o PoolRelay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolRelay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pool_id_bech32"] = o.PoolIdBech32
	toSerialize["relays"] = o.Relays
	return toSerialize, nil
}

type NullablePoolRelay struct {
	value *PoolRelay
	isSet bool
}

func (v NullablePoolRelay) Get() *PoolRelay {
	return v.value
}

func (v *NullablePoolRelay) Set(val *PoolRelay) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolRelay) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolRelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolRelay(val *PoolRelay) *NullablePoolRelay {
	return &NullablePoolRelay{value: val, isSet: true}
}

func (v NullablePoolRelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolRelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


