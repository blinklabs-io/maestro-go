/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Redeemers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Redeemers{}

// Redeemers struct for Redeemers
type Redeemers struct {
	Certificates []CertRedeemer `json:"certificates"`
	Mints []MintRedeemer `json:"mints"`
	Spends []SpendRedeemer `json:"spends"`
	Withdrawals []WdrlRedeemer `json:"withdrawals"`
}

// NewRedeemers instantiates a new Redeemers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedeemers(certificates []CertRedeemer, mints []MintRedeemer, spends []SpendRedeemer, withdrawals []WdrlRedeemer) *Redeemers {
	this := Redeemers{}
	this.Certificates = certificates
	this.Mints = mints
	this.Spends = spends
	this.Withdrawals = withdrawals
	return &this
}

// NewRedeemersWithDefaults instantiates a new Redeemers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedeemersWithDefaults() *Redeemers {
	this := Redeemers{}
	return &this
}

// GetCertificates returns the Certificates field value
func (o *Redeemers) GetCertificates() []CertRedeemer {
	if o == nil {
		var ret []CertRedeemer
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *Redeemers) GetCertificatesOk() ([]CertRedeemer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *Redeemers) SetCertificates(v []CertRedeemer) {
	o.Certificates = v
}

// GetMints returns the Mints field value
func (o *Redeemers) GetMints() []MintRedeemer {
	if o == nil {
		var ret []MintRedeemer
		return ret
	}

	return o.Mints
}

// GetMintsOk returns a tuple with the Mints field value
// and a boolean to check if the value has been set.
func (o *Redeemers) GetMintsOk() ([]MintRedeemer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mints, true
}

// SetMints sets field value
func (o *Redeemers) SetMints(v []MintRedeemer) {
	o.Mints = v
}

// GetSpends returns the Spends field value
func (o *Redeemers) GetSpends() []SpendRedeemer {
	if o == nil {
		var ret []SpendRedeemer
		return ret
	}

	return o.Spends
}

// GetSpendsOk returns a tuple with the Spends field value
// and a boolean to check if the value has been set.
func (o *Redeemers) GetSpendsOk() ([]SpendRedeemer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spends, true
}

// SetSpends sets field value
func (o *Redeemers) SetSpends(v []SpendRedeemer) {
	o.Spends = v
}

// GetWithdrawals returns the Withdrawals field value
func (o *Redeemers) GetWithdrawals() []WdrlRedeemer {
	if o == nil {
		var ret []WdrlRedeemer
		return ret
	}

	return o.Withdrawals
}

// GetWithdrawalsOk returns a tuple with the Withdrawals field value
// and a boolean to check if the value has been set.
func (o *Redeemers) GetWithdrawalsOk() ([]WdrlRedeemer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Withdrawals, true
}

// SetWithdrawals sets field value
func (o *Redeemers) SetWithdrawals(v []WdrlRedeemer) {
	o.Withdrawals = v
}

func (o Redeemers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Redeemers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificates"] = o.Certificates
	toSerialize["mints"] = o.Mints
	toSerialize["spends"] = o.Spends
	toSerialize["withdrawals"] = o.Withdrawals
	return toSerialize, nil
}

type NullableRedeemers struct {
	value *Redeemers
	isSet bool
}

func (v NullableRedeemers) Get() *Redeemers {
	return v.value
}

func (v *NullableRedeemers) Set(val *Redeemers) {
	v.value = val
	v.isSet = true
}

func (v NullableRedeemers) IsSet() bool {
	return v.isSet
}

func (v *NullableRedeemers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedeemers(val *Redeemers) *NullableRedeemers {
	return &NullableRedeemers{value: val, isSet: true}
}

func (v NullableRedeemers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedeemers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


