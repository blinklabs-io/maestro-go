/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Bound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bound{}

// Bound struct for Bound
type Bound struct {
	Epoch int64 `json:"epoch"`
	Slot int64 `json:"slot"`
	Time int64 `json:"time"`
}

// NewBound instantiates a new Bound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBound(epoch int64, slot int64, time int64) *Bound {
	this := Bound{}
	this.Epoch = epoch
	this.Slot = slot
	this.Time = time
	return &this
}

// NewBoundWithDefaults instantiates a new Bound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoundWithDefaults() *Bound {
	this := Bound{}
	return &this
}

// GetEpoch returns the Epoch field value
func (o *Bound) GetEpoch() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value
// and a boolean to check if the value has been set.
func (o *Bound) GetEpochOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epoch, true
}

// SetEpoch sets field value
func (o *Bound) SetEpoch(v int64) {
	o.Epoch = v
}

// GetSlot returns the Slot field value
func (o *Bound) GetSlot() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Slot
}

// GetSlotOk returns a tuple with the Slot field value
// and a boolean to check if the value has been set.
func (o *Bound) GetSlotOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slot, true
}

// SetSlot sets field value
func (o *Bound) SetSlot(v int64) {
	o.Slot = v
}

// GetTime returns the Time field value
func (o *Bound) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *Bound) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *Bound) SetTime(v int64) {
	o.Time = v
}

func (o Bound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["epoch"] = o.Epoch
	toSerialize["slot"] = o.Slot
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

type NullableBound struct {
	value *Bound
	isSet bool
}

func (v NullableBound) Get() *Bound {
	return v.value
}

func (v *NullableBound) Set(val *Bound) {
	v.value = val
	v.isSet = true
}

func (v NullableBound) IsSet() bool {
	return v.isSet
}

func (v *NullableBound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBound(val *Bound) *NullableBound {
	return &NullableBound{value: val, isSet: true}
}

func (v NullableBound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


