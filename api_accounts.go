/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AccountsAPI interface {

	/*
	AccountAddresses Stake account addresses

	Returns a list of addresses seen on-chain which use the specified stake key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountAddressesRequest
	*/
	AccountAddresses(ctx context.Context, stakeAddress string) AccountsAPIAccountAddressesRequest

	// AccountAddressesExecute executes the request
	//  @return []string
	AccountAddressesExecute(r AccountsAPIAccountAddressesRequest) ([]string, *http.Response, error)

	/*
	AccountAssets Stake account assets

	Returns a list of native assets which are owned by addresses with the specified stake key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountAssetsRequest
	*/
	AccountAssets(ctx context.Context, stakeAddress string) AccountsAPIAccountAssetsRequest

	// AccountAssetsExecute executes the request
	//  @return []Asset
	AccountAssetsExecute(r AccountsAPIAccountAssetsRequest) ([]Asset, *http.Response, error)

	/*
	AccountHistory Stake account history

	Returns per-epoch history of the specified stake key

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountHistoryRequest
	*/
	AccountHistory(ctx context.Context, stakeAddress string) AccountsAPIAccountHistoryRequest

	// AccountHistoryExecute executes the request
	//  @return []AccountHistory
	AccountHistoryExecute(r AccountsAPIAccountHistoryRequest) ([]AccountHistory, *http.Response, error)

	/*
	AccountInfo Stake account information

	Returns a summary of information regarding a stake account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountInfoRequest
	*/
	AccountInfo(ctx context.Context, stakeAddress string) AccountsAPIAccountInfoRequest

	// AccountInfoExecute executes the request
	//  @return AccountInfo
	AccountInfoExecute(r AccountsAPIAccountInfoRequest) (*AccountInfo, *http.Response, error)

	/*
	AccountRewards Stake account rewards

	Returns a list of staking-related rewards for the specified stake key (pool `member` or `leader` rewards, deposit `refund`)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountRewardsRequest
	*/
	AccountRewards(ctx context.Context, stakeAddress string) AccountsAPIAccountRewardsRequest

	// AccountRewardsExecute executes the request
	//  @return []AccountReward
	AccountRewardsExecute(r AccountsAPIAccountRewardsRequest) ([]AccountReward, *http.Response, error)

	/*
	AccountUpdates Stake account updates

	Returns a list of updates relating to the specified stake key (`registration`, `deregistration`, `delegation`, `withdrawal`)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param stakeAddress Bech32 encoded stake address
	@return AccountsAPIAccountUpdatesRequest
	*/
	AccountUpdates(ctx context.Context, stakeAddress string) AccountsAPIAccountUpdatesRequest

	// AccountUpdatesExecute executes the request
	//  @return []AccountUpdate
	AccountUpdatesExecute(r AccountsAPIAccountUpdatesRequest) ([]AccountUpdate, *http.Response, error)
}

// AccountsAPIService AccountsAPI service
type AccountsAPIService service

type AccountsAPIAccountAddressesRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r AccountsAPIAccountAddressesRequest) Count(count int32) AccountsAPIAccountAddressesRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AccountsAPIAccountAddressesRequest) Page(page int32) AccountsAPIAccountAddressesRequest {
	r.page = &page
	return r
}

func (r AccountsAPIAccountAddressesRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.AccountAddressesExecute(r)
}

/*
AccountAddresses Stake account addresses

Returns a list of addresses seen on-chain which use the specified stake key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountAddressesRequest
*/
func (a *AccountsAPIService) AccountAddresses(ctx context.Context, stakeAddress string) AccountsAPIAccountAddressesRequest {
	return AccountsAPIAccountAddressesRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return []string
func (a *AccountsAPIService) AccountAddressesExecute(r AccountsAPIAccountAddressesRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}/addresses"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsAPIAccountAssetsRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r AccountsAPIAccountAssetsRequest) Count(count int32) AccountsAPIAccountAssetsRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AccountsAPIAccountAssetsRequest) Page(page int32) AccountsAPIAccountAssetsRequest {
	r.page = &page
	return r
}

func (r AccountsAPIAccountAssetsRequest) Execute() ([]Asset, *http.Response, error) {
	return r.ApiService.AccountAssetsExecute(r)
}

/*
AccountAssets Stake account assets

Returns a list of native assets which are owned by addresses with the specified stake key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountAssetsRequest
*/
func (a *AccountsAPIService) AccountAssets(ctx context.Context, stakeAddress string) AccountsAPIAccountAssetsRequest {
	return AccountsAPIAccountAssetsRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return []Asset
func (a *AccountsAPIService) AccountAssetsExecute(r AccountsAPIAccountAssetsRequest) ([]Asset, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountAssets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}/assets"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsAPIAccountHistoryRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
	epochNo *int32
	count *int32
	page *int32
}

// Fetch result for a specific epoch
func (r AccountsAPIAccountHistoryRequest) EpochNo(epochNo int32) AccountsAPIAccountHistoryRequest {
	r.epochNo = &epochNo
	return r
}

// The max number of results per pagination page
func (r AccountsAPIAccountHistoryRequest) Count(count int32) AccountsAPIAccountHistoryRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AccountsAPIAccountHistoryRequest) Page(page int32) AccountsAPIAccountHistoryRequest {
	r.page = &page
	return r
}

func (r AccountsAPIAccountHistoryRequest) Execute() ([]AccountHistory, *http.Response, error) {
	return r.ApiService.AccountHistoryExecute(r)
}

/*
AccountHistory Stake account history

Returns per-epoch history of the specified stake key

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountHistoryRequest
*/
func (a *AccountsAPIService) AccountHistory(ctx context.Context, stakeAddress string) AccountsAPIAccountHistoryRequest {
	return AccountsAPIAccountHistoryRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return []AccountHistory
func (a *AccountsAPIService) AccountHistoryExecute(r AccountsAPIAccountHistoryRequest) ([]AccountHistory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AccountHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.epochNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "epoch_no", r.epochNo, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsAPIAccountInfoRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
}

func (r AccountsAPIAccountInfoRequest) Execute() (*AccountInfo, *http.Response, error) {
	return r.ApiService.AccountInfoExecute(r)
}

/*
AccountInfo Stake account information

Returns a summary of information regarding a stake account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountInfoRequest
*/
func (a *AccountsAPIService) AccountInfo(ctx context.Context, stakeAddress string) AccountsAPIAccountInfoRequest {
	return AccountsAPIAccountInfoRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return AccountInfo
func (a *AccountsAPIService) AccountInfoExecute(r AccountsAPIAccountInfoRequest) (*AccountInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsAPIAccountRewardsRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r AccountsAPIAccountRewardsRequest) Count(count int32) AccountsAPIAccountRewardsRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AccountsAPIAccountRewardsRequest) Page(page int32) AccountsAPIAccountRewardsRequest {
	r.page = &page
	return r
}

func (r AccountsAPIAccountRewardsRequest) Execute() ([]AccountReward, *http.Response, error) {
	return r.ApiService.AccountRewardsExecute(r)
}

/*
AccountRewards Stake account rewards

Returns a list of staking-related rewards for the specified stake key (pool `member` or `leader` rewards, deposit `refund`)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountRewardsRequest
*/
func (a *AccountsAPIService) AccountRewards(ctx context.Context, stakeAddress string) AccountsAPIAccountRewardsRequest {
	return AccountsAPIAccountRewardsRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return []AccountReward
func (a *AccountsAPIService) AccountRewardsExecute(r AccountsAPIAccountRewardsRequest) ([]AccountReward, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AccountReward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}/rewards"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AccountsAPIAccountUpdatesRequest struct {
	ctx context.Context
	ApiService AccountsAPI
	stakeAddress string
	count *int32
	page *int32
}

// The max number of results per pagination page
func (r AccountsAPIAccountUpdatesRequest) Count(count int32) AccountsAPIAccountUpdatesRequest {
	r.count = &count
	return r
}

// Pagination page number to show results for
func (r AccountsAPIAccountUpdatesRequest) Page(page int32) AccountsAPIAccountUpdatesRequest {
	r.page = &page
	return r
}

func (r AccountsAPIAccountUpdatesRequest) Execute() ([]AccountUpdate, *http.Response, error) {
	return r.ApiService.AccountUpdatesExecute(r)
}

/*
AccountUpdates Stake account updates

Returns a list of updates relating to the specified stake key (`registration`, `deregistration`, `delegation`, `withdrawal`)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stakeAddress Bech32 encoded stake address
 @return AccountsAPIAccountUpdatesRequest
*/
func (a *AccountsAPIService) AccountUpdates(ctx context.Context, stakeAddress string) AccountsAPIAccountUpdatesRequest {
	return AccountsAPIAccountUpdatesRequest{
		ApiService: a,
		ctx: ctx,
		stakeAddress: stakeAddress,
	}
}

// Execute executes the request
//  @return []AccountUpdate
func (a *AccountsAPIService) AccountUpdatesExecute(r AccountsAPIAccountUpdatesRequest) ([]AccountUpdate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AccountUpdate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountUpdates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts/{stake_address}/updates"
	localVarPath = strings.Replace(localVarPath, "{"+"stake_address"+"}", url.PathEscape(parameterValueToString(r.stakeAddress, "stakeAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key_header"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
