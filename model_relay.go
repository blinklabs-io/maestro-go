/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the Relay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Relay{}

// Relay Stake pool relay
type Relay struct {
	Dns *string `json:"dns,omitempty"`
	Ipv4 *string `json:"ipv4,omitempty"`
	Ipv6 *string `json:"ipv6,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Srv *string `json:"srv,omitempty"`
}

// NewRelay instantiates a new Relay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelay() *Relay {
	this := Relay{}
	return &this
}

// NewRelayWithDefaults instantiates a new Relay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelayWithDefaults() *Relay {
	this := Relay{}
	return &this
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *Relay) GetDns() string {
	if o == nil || IsNil(o.Dns) {
		var ret string
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relay) GetDnsOk() (*string, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *Relay) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given string and assigns it to the Dns field.
func (o *Relay) SetDns(v string) {
	o.Dns = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *Relay) GetIpv4() string {
	if o == nil || IsNil(o.Ipv4) {
		var ret string
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relay) GetIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *Relay) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given string and assigns it to the Ipv4 field.
func (o *Relay) SetIpv4(v string) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *Relay) GetIpv6() string {
	if o == nil || IsNil(o.Ipv6) {
		var ret string
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relay) GetIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *Relay) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given string and assigns it to the Ipv6 field.
func (o *Relay) SetIpv6(v string) {
	o.Ipv6 = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Relay) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relay) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Relay) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Relay) SetPort(v int32) {
	o.Port = &v
}

// GetSrv returns the Srv field value if set, zero value otherwise.
func (o *Relay) GetSrv() string {
	if o == nil || IsNil(o.Srv) {
		var ret string
		return ret
	}
	return *o.Srv
}

// GetSrvOk returns a tuple with the Srv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Relay) GetSrvOk() (*string, bool) {
	if o == nil || IsNil(o.Srv) {
		return nil, false
	}
	return o.Srv, true
}

// HasSrv returns a boolean if a field has been set.
func (o *Relay) HasSrv() bool {
	if o != nil && !IsNil(o.Srv) {
		return true
	}

	return false
}

// SetSrv gets a reference to the given string and assigns it to the Srv field.
func (o *Relay) SetSrv(v string) {
	o.Srv = &v
}

func (o Relay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Relay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Srv) {
		toSerialize["srv"] = o.Srv
	}
	return toSerialize, nil
}

type NullableRelay struct {
	value *Relay
	isSet bool
}

func (v NullableRelay) Get() *Relay {
	return v.value
}

func (v *NullableRelay) Set(val *Relay) {
	v.value = val
	v.isSet = true
}

func (v NullableRelay) IsSet() bool {
	return v.isSet
}

func (v *NullableRelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelay(val *Relay) *NullableRelay {
	return &NullableRelay{value: val, isSet: true}
}

func (v NullableRelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


