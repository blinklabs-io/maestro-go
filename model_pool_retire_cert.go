/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PoolRetireCert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolRetireCert{}

// PoolRetireCert Certificate for retiring a stake pool
type PoolRetireCert struct {
	// Pool will be retired at the end of this epoch
	AfterEpoch int32 `json:"after_epoch"`
	// Index of the certificate in the transaction
	CertIndex int32 `json:"cert_index"`
	// Bech32 pool ID of the pool being retired
	PoolId string `json:"pool_id"`
}

// NewPoolRetireCert instantiates a new PoolRetireCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolRetireCert(afterEpoch int32, certIndex int32, poolId string) *PoolRetireCert {
	this := PoolRetireCert{}
	this.AfterEpoch = afterEpoch
	this.CertIndex = certIndex
	this.PoolId = poolId
	return &this
}

// NewPoolRetireCertWithDefaults instantiates a new PoolRetireCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolRetireCertWithDefaults() *PoolRetireCert {
	this := PoolRetireCert{}
	return &this
}

// GetAfterEpoch returns the AfterEpoch field value
func (o *PoolRetireCert) GetAfterEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AfterEpoch
}

// GetAfterEpochOk returns a tuple with the AfterEpoch field value
// and a boolean to check if the value has been set.
func (o *PoolRetireCert) GetAfterEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AfterEpoch, true
}

// SetAfterEpoch sets field value
func (o *PoolRetireCert) SetAfterEpoch(v int32) {
	o.AfterEpoch = v
}

// GetCertIndex returns the CertIndex field value
func (o *PoolRetireCert) GetCertIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CertIndex
}

// GetCertIndexOk returns a tuple with the CertIndex field value
// and a boolean to check if the value has been set.
func (o *PoolRetireCert) GetCertIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertIndex, true
}

// SetCertIndex sets field value
func (o *PoolRetireCert) SetCertIndex(v int32) {
	o.CertIndex = v
}

// GetPoolId returns the PoolId field value
func (o *PoolRetireCert) GetPoolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *PoolRetireCert) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *PoolRetireCert) SetPoolId(v string) {
	o.PoolId = v
}

func (o PoolRetireCert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolRetireCert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["after_epoch"] = o.AfterEpoch
	toSerialize["cert_index"] = o.CertIndex
	toSerialize["pool_id"] = o.PoolId
	return toSerialize, nil
}

type NullablePoolRetireCert struct {
	value *PoolRetireCert
	isSet bool
}

func (v NullablePoolRetireCert) Get() *PoolRetireCert {
	return v.value
}

func (v *NullablePoolRetireCert) Set(val *PoolRetireCert) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolRetireCert) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolRetireCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolRetireCert(val *PoolRetireCert) *NullablePoolRetireCert {
	return &NullablePoolRetireCert{value: val, isSet: true}
}

func (v NullablePoolRetireCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolRetireCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


