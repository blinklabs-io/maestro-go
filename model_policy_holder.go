/*
Blockchain Indexer API

The **Maestro Blockchain Indexer API** follows the [REST](https://restfulapi.net/) paradigm. To interact with Mapi, please  head over to [Dashboards](https://dashboard.gomaestro.org), create an API project, and copy its associated long-lived API key into your request header.  Your Mapi project is rate-limited based on your API package tier. Please see the available [Packages](https://dashboard.gomaestro.org/pricing) for more details or to upgrade your plan.  Example `GET` request for retrieving the chain tip: ``` curl -X GET --header \"api-key: <your_project_api_key>\" https://mainnet.gomaestro-api.org/v0/chain-tip ```  Example `POST` request for submitting a transaction: ``` curl -X POST --header \"Content-Type: application/cbor\" --header \"api-key: <your_project_api_key>\" --data @tx.signed https://mainnet.gomaestro-api.org/v0/transactions ```

API version: V0
Contact: info@gomaestro.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package maestro

import (
	"encoding/json"
)

// checks if the PolicyHolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyHolder{}

// PolicyHolder Holder of assets of a specific policy
type PolicyHolder struct {
	// Address of the holder
	Address string `json:"address"`
	Assets []AssetInPolicy `json:"assets"`
}

// NewPolicyHolder instantiates a new PolicyHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyHolder(address string, assets []AssetInPolicy) *PolicyHolder {
	this := PolicyHolder{}
	this.Address = address
	this.Assets = assets
	return &this
}

// NewPolicyHolderWithDefaults instantiates a new PolicyHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyHolderWithDefaults() *PolicyHolder {
	this := PolicyHolder{}
	return &this
}

// GetAddress returns the Address field value
func (o *PolicyHolder) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PolicyHolder) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PolicyHolder) SetAddress(v string) {
	o.Address = v
}

// GetAssets returns the Assets field value
func (o *PolicyHolder) GetAssets() []AssetInPolicy {
	if o == nil {
		var ret []AssetInPolicy
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *PolicyHolder) GetAssetsOk() ([]AssetInPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets, true
}

// SetAssets sets field value
func (o *PolicyHolder) SetAssets(v []AssetInPolicy) {
	o.Assets = v
}

func (o PolicyHolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyHolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["assets"] = o.Assets
	return toSerialize, nil
}

type NullablePolicyHolder struct {
	value *PolicyHolder
	isSet bool
}

func (v NullablePolicyHolder) Get() *PolicyHolder {
	return v.value
}

func (v *NullablePolicyHolder) Set(val *PolicyHolder) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyHolder) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyHolder(val *PolicyHolder) *NullablePolicyHolder {
	return &NullablePolicyHolder{value: val, isSet: true}
}

func (v NullablePolicyHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


