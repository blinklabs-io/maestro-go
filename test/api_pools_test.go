/*
Blockchain Indexer API

Testing PoolsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package maestro

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/blinklabs-io/maestro-go"
)

func Test_maestro_PoolsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PoolsAPIService ListPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoolsAPI.ListPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolBlocks(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolDelegators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolDelegators(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolHistory(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolInfo(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolMetadata(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolRelays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolRelays(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoolsAPIService PoolUpdates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var poolId string

		resp, httpRes, err := apiClient.PoolsAPI.PoolUpdates(context.Background(), poolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
