/*
Blockchain Indexer API

Testing TransactionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/blinklabs-io/maestro-go"
)

func Test_openapi_TransactionsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TransactionsApiService AddressByTxo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var txHash string
		var index int32

		resp, httpRes, err := apiClient.TransactionsApi.AddressByTxo(context.Background(), txHash, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService IogTxSubmit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransactionsApi.IogTxSubmit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService MaestroTxSubmit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransactionsApi.MaestroTxSubmit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService TxCborByTxHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var txHash string

		resp, httpRes, err := apiClient.TransactionsApi.TxCborByTxHash(context.Background(), txHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsApiService UtxoByTxoRef", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var txHash string
		var index int32

		resp, httpRes, err := apiClient.TransactionsApi.UtxoByTxoRef(context.Background(), txHash, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
