/*
Blockchain Indexer API

Testing AssetsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/blinklabs-io/maestro-go"
)

func Test_openapi_AssetsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssetsApiService AssetAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsApi.AssetAddresses(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsApi.AssetInfo(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetTxs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsApi.AssetTxs(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService AssetUpdates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsApi.AssetUpdates(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService PolicyAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsApi.PolicyAddresses(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService PolicyInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsApi.PolicyInfo(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService PolicyTxs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsApi.PolicyTxs(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsApiService PolicyUtxos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsApi.PolicyUtxos(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
