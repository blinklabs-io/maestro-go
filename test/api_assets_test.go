/*
Blockchain Indexer API

Testing AssetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package maestro

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/blinklabs-io/maestro-go"
)

func Test_maestro_AssetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssetsAPIService AssetAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsAPI.AssetAddresses(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService AssetInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsAPI.AssetInfo(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService AssetTxs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsAPI.AssetTxs(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService AssetUpdates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsAPI.AssetUpdates(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService AssetUtxos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var asset string

		resp, httpRes, err := apiClient.AssetsAPI.AssetUtxos(context.Background(), asset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService PolicyAddresses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsAPI.PolicyAddresses(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService PolicyInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsAPI.PolicyInfo(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService PolicyTxs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsAPI.PolicyTxs(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService PolicyUtxos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policy string

		resp, httpRes, err := apiClient.AssetsAPI.PolicyUtxos(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
